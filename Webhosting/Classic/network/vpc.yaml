AWSTemplateFormatVersion: 2010-09-09
Parameters:
  NetworkName:
    Type: String
    Default: ""
  VpcCidr:
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Default: 10.192.0.0/16
  EnableDnsHostnames:
    Type: String
    Default: true
    AllowedValues:
    - true
    - false
  EnableDnsSupport:
    Type: String
    Default: true
    AllowedValues:
    - true
    - false
  AddPublicSubnet:
    Type: String
    Default: true
    AllowedValues:
    - true
    - false
  PrivateCidrList:
    Type: CommaDelimitedList
    Default: ""    
  PublicCidrList:
    Type: CommaDelimitedList
    Default: ""
  CidrBits:
    Type: Number
    MinValue: 4
    MaxValue: 16
    Default: 10
Conditions:
  NameSet: !Not [!Equals [!Ref NetworkName, '']]
  PublicNetSet: !Equals [!Ref AddPublicSubnet, 'true']
  # True if no Public Subnet is added and PrivateCidrList is defined
  # else True if both PrivateCidrList and PublicCidrList are defined
  SubnetCidrSet:
    !Or
    - !And
      - !Equals [!Ref AddPublicSubnet, 'false']
      - !Not [!Equals [!Select [0, !Ref PrivateCidrList], '']]
    - !And
      - !Not [!Equals [!Select [0, !Ref PrivateCidrList], '']]
      - !Not [!Equals [!Select [0, !Ref PublicCidrList], '']]
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: !Ref EnableDnsHostnames
      EnableDnsSupport: !Ref EnableDnsSupport
      Tags:
      - Key: Name
        Value: !Ref NetworkName
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !If [SubnetCidrSet, !Select [0, !Ref PrivateCidrList], !Select [0, !Cidr [!Ref VpcCidr, 6, !Ref CidrBits]]]
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Join [-, [private-az1, !If [NameSet, !Ref NetworkName, !Ref AWS::StackName]]]
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !If [SubnetCidrSet, !Select [1, !Ref PrivateCidrList], !Select [2, !Cidr [!Ref VpcCidr, 6, !Ref CidrBits]]]
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Join [-, [private-az2, !If [NameSet, !Ref NetworkName, !Ref AWS::StackName]]]
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Join [-, [private-rt-az1, !If [NameSet, !Ref NetworkName, !Ref AWS::StackName]]]
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Join [-, [private-rt-az2, !If [NameSet, !Ref NetworkName, !Ref AWS::StackName]]]
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Condition: PublicNetSet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !If [SubnetCidrSet, !Select [0, !Ref PublicCidrList], !Select [1, !Cidr [!Ref VpcCidr, 6, !Ref CidrBits]]]
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Join [-, [public-az1, !If [NameSet, !Ref NetworkName, !Ref AWS::StackName]]]
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Condition: PublicNetSet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !If [SubnetCidrSet, !Select [1, !Ref PublicCidrList], !Select [3, !Cidr [!Ref VpcCidr, 6, !Ref CidrBits]]]
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Join [-, [public-az2, !If [NameSet, !Ref NetworkName, !Ref AWS::StackName]]]
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: PublicNetSet
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Join [-, [public-rt, !If [NameSet, !Ref NetworkName, !Ref AWS::StackName]]]
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: PublicNetSet
    Properties:
      Tags:
      - Key: Name
        Value: !Join [-, [igw, !If [NameSet, !Ref NetworkName, !Ref AWS::StackName]]]
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: PublicNetSet
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Condition: PublicNetSet
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: PublicNetSet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: PublicNetSet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
Outputs:
  VpcId:
    Value: !Ref Vpc
  PublicSubnets:
    Value: !Join ["," , [!Ref PublicSubnet1, !Ref PublicSubnet2]]
  PrivateSubnets:
    Value: !Join ["," , [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
  PrivateRouteTables:
    Value: !Join [",", [!Ref PrivateRouteTable1, !Ref PrivateRouteTable2]]
